#BlueJ class context
comment0.target=Password
comment0.text=\r\n\ This\ class\ elicits\ passwords\ from\ the\ user\ and\ then\ runs\ several\ tests\ on\ the\ passwords\ to\ ensure\ that\ they\ meet\r\n\ the\ minimum\ requirements.\ \ If\ they\ fails\ any\ checks,\ a\ report\ is\ supposed\ to\ be\ printed\ out\ to\ tell\ the\ user\r\n\ what\ they\ did\ wrong\ in\ choosing\ their\ password.\ \ If\ they\ pass\ the\ checks,\ a\ report\ will\ be\ printed\ out\ indicating\r\n\ as\ such.\r\n\ \r\n\ @author\ Michael\ R.\ Boykin\ \r\n\ @version\ 08/27/2017\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ The\ main\ method\ where\ the\ java\ compiler\ will\ start\ outside\ of\ an\ API.\r\n\ \r\n\ @param\ \ None.\r\n\ @return\ None.\r\n
comment10.params=
comment10.target=void\ printReport()
comment10.text=\r\n\ This\ method\ writes\ the\ password\ validity\ tests\ to\ a\ file\ in\ the\ form\ of\:\r\n\ password\:\ <password>,\ <valid\ /\ invalid>\r\n\ \ --\ <test\ method\ failed>\r\n\ \r\n\ @param\ \ \ None\r\n\ @return\ \ None\r\n
comment11.params=
comment11.target=java.lang.String\ readPasswordFromUser()
comment11.text=\r\n\ This\ method\ waits\ for\ the\ user\ to\ type\ a\ password.\ \ No\ validation\ is\ done\ at\ this\ point,\ just\ passes\ it\ on.\r\n\ \r\n\ @param\ \ \ None\r\n\ @return\ \ String\ the\ password\ that\ the\ user\ has\ chosen.\r\n
comment12.params=
comment12.target=boolean\ enterMorePasswords()
comment12.text=\r\n\ This\ method\ asks\ the\ user\ if\ they\ have\ more\ passwords\ to\ type.\ \ It\ will\ only\ accept\ a\ y/n\ or\ yes/no\ answer.\r\n\ Anything\ else\ will\ force\ it\ to\ loop\ again.\ \ The\ response\ is\ case-insensitive\r\n\ \r\n\ @param\ \ \ None\r\n\ @return\ \ Boolean\ True\ or\ False\ if\ the\ user\ wants\ to\ type\ another\ password.\r\n
comment2.params=x
comment2.target=void\ addToReport(java.lang.StringBuffer)
comment2.text=\r\n\ This\ method\ writes\ the\ password\ validity\ tests\ to\ a\ report\ variable\ for\ storage\ until\ printing\:\r\n\ password\:\ <password>,\ <valid\ /\ invalid>\r\n\ \ --\ <test\ method\ failed>\r\n\ \r\n\ @param\ String\ password\ \ a\ password\ entered\ by\ the\ user\ for\ testing.\r\n\ @return\ boolean\ true\ or\ false;\ does\ the\ password\ have\ at\ least\ 1\ upper\ and\ lower\ case\ character.\r\n
comment3.params=passwordArray
comment3.target=boolean\ checkCase(char[])
comment3.text=\r\n\ Checks\ each\ of\ the\ characters\ of\ the\ password\ for\ at\ least\ 1\ upper\ and\ 1\ lower\ case\ character.\r\n\ \r\n\ @param\ String\ password\ \ a\ password\ entered\ by\ the\ user\ for\ testing.\r\n\ @return\ boolean\ true\ or\ false;\ does\ the\ password\ have\ at\ least\ 1\ upper\ and\ lower\ case\ character.\r\n
comment4.params=passwordArray
comment4.target=boolean\ checkLength(char[])
comment4.text=\r\n\ Checks\ the\ length\ of\ the\ password\ for\ validity\ (>4\ characters\ long),\ verifying\ that\ it\ is\ long\ enough.\r\n\ \r\n\ @param\ String\ password\ \ a\ password\ entered\ by\ the\ user\ for\ testing.\r\n\ @return\ boolean\ true\ or\ false;\ is\ the\ password\ long\ enough.\r\n
comment5.params=passwordArray
comment5.target=boolean\ checkNumber(char[])
comment5.text=\r\n\ Checks\ each\ of\ the\ characters\ of\ the\ password\ for\ at\ least\ 1\ number.\r\n\ \r\n\ @param\ String\ password\ \ a\ password\ entered\ by\ the\ user\ for\ testing.\r\n\ @return\ boolean\ true\ or\ false;\ does\ the\ password\ have\ at\ least\ 1\ number.\r\n
comment6.params=
comment6.target=boolean\ checkValidity()
comment6.text=\r\n\ Checks\ each\ of\ the\ characters\ of\ the\ password\ ensuring\ no\ <space>,\ <tab>\ or\ <CR>\ characters\ entered.\r\n\ \r\n\ @param\ None.\r\n\ @return\ boolean\ true\ or\ false;\ is\ the\ password\ clear\ of\ white\ spaces.\r\n
comment7.params=passwordArray
comment7.target=boolean\ checkWhiteSpace(char[])
comment7.text=\r\n\ Checks\ each\ of\ the\ characters\ of\ the\ password\ ensuring\ no\ <space>,\ <tab>\ or\ <CR>\ characters\ entered.\r\n\ \r\n\ @param\ String\ password\ \ a\ password\ entered\ by\ the\ user\ for\ testing.\r\n\ @return\ boolean\ true\ or\ false;\ is\ the\ password\ clear\ of\ white\ spaces.\r\n
comment8.params=
comment8.target=void\ greetUser()
comment8.text=\r\n\ This\ method\ writes\ a\ brief\ explanation\ to\ the\ screen\ of\ what\ the\ program\ does.\r\n\ \r\n\ @param\ \ \ None\r\n\ @return\ \ None\r\n
comment9.params=outputPasswordStr
comment9.target=java.lang.StringBuffer\ printPasswordValidity(java.lang.String)
comment9.text=\r\n\ This\ method\ writes\ the\ password\ validity\ tests\ on\ screen\ in\ the\ form\ of\:\r\n\ password\:\ <password>,\ <valid\ /\ invalid>\r\n\ \ --\ <test\ method\ failed>\r\n\ \r\n\ @param\ \ \ char[]\ The\ password\ is\ brought\ in\ from\ main.\r\n\ @return\ \ StringBuffer\ returns\ a\ StringBuffer\ of\ the\ whole\ test.\r\n
numComments=13
